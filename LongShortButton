// detectButtonPress
// Use millis to detect a short and long button press
// See baldengineer.com/detect-short-long-button-press-using-millis.html for more information
// Created by James Lewis

#define PRESSED LOW						//Pull down resistor
#define NOT_PRESSED HIGH

const byte led = 13;
const unsigned long shortPress = 100;
const unsigned long  longPress = 500;

long blinkInterval = 500;
unsigned long previousBlink=0;
bool ledState = true;
bool blinkState = true;
typedef struct Buttons {
	const byte pin = 2;
	const int debounce = 10;
	unsigned long counter=0;
	bool prevState = NOT_PRESSED;
	bool currentState;
} Button;

Button button;							//create a Button Variable type

void setup() {
  pinMode(led, OUTPUT);
  pinMode(button.pin, INPUT_PULLUP);
}

void loop() {
	button.currentState = digitalRead(button.pin);		//check the button
	if (button.currentState != button.prevState) {		//has it changed?
		delay(button.debounce);				//update status in case of bouce
		button.currentState = digitalRead(button.pin);
		if (button.currentState == PRESSED) {		//a new press event occured
			button.counter = millis();		//record when button went down
		}

		if (button.currentState == NOT_PRESSED) {	//no longer pressed; how long was it down?
			unsigned long currentMillis = millis();
			//if ((currentMillis - button.counter >= shortPress) && !(currentMillis - button.counter >= longPress)) {
			if ((currentMillis - button.counter >= shortPress) && !(currentMillis - button.counter >= longPress)) {
				// short press detected. 
				handleShortPress();
			}
			if ((currentMillis - button.counter >= longPress)) {		//the long press was detected
				handleLongPress();
			}
		}
		button.prevState = button.currentState;		//detect when state changes
	} 
	blinkLED();
}

void handleShortPress() {
	blinkState = true;
	ledState = true;
	blinkInterval = blinkInterval / 2;
	if (blinkInterval <= 50)
		blinkInterval = 500;
}

void handleLongPress() {
	blinkState = false;
	ledState = false;
}

void blinkLED() {						//blink the LED (or not)
	if (blinkState) {
		if (millis() - previousBlink >= blinkInterval) {	//blink the LED
			ledState = !ledState;
			previousBlink = millis();
		}
	} else {
		ledState = false;
	}
	digitalWrite(led, ledState);
}
